{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nlet FormProductsComponent = class FormProductsComponent {\n  constructor(formBuilder, productService) {\n    this.formBuilder = formBuilder;\n    this.productService = productService;\n    this.selectedImage = null; // For storing the selected image file\n    this.productForm = this.formBuilder.group({\n      name: ['', Validators.required],\n      description: ['', Validators.required],\n      price: [0, [Validators.required, Validators.min(0)]],\n      categoria: ['', Validators.required],\n      onSale: [false]\n    });\n  }\n  onSubmit() {\n    if (this.productForm.valid) {\n      const formData = new FormData();\n      formData.append('name', this.productForm.get('name')?.value);\n      formData.append('description', this.productForm.get('description')?.value);\n      formData.append('price', this.productForm.get('price')?.value);\n      formData.append('categoria', this.productForm.get('categoria')?.value);\n      formData.append('onSale', this.productForm.get('onSale')?.value);\n      if (this.selectedImage) {\n        formData.append('image', this.selectedImage);\n      }\n      this.productService.submitProduct(formData).subscribe(response => {\n        console.log('Form submitted successfully!', response);\n      }, error => {\n        console.error('Error submitting form!', error);\n      });\n    } else {\n      console.log('Form is invalid!');\n    }\n  }\n  onImageSelected(event) {\n    if (event.target.files && event.target.files.length > 0) {\n      this.selectedImage = event.target.files[0];\n    }\n  }\n};\nFormProductsComponent = __decorate([Component({\n  selector: 'app-form-products',\n  templateUrl: './form-products.component.html',\n  styleUrls: ['./form-products.component.css']\n})], FormProductsComponent);\nexport { FormProductsComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AACzC,SAAiCC,UAAU,QAAQ,gBAAgB;AAQ5D,IAAMC,qBAAqB,GAA3B,MAAMA,qBAAqB;EAIhCC,YAAoBC,WAAwB,EAAUC,cAA8B;IAAhE,gBAAW,GAAXD,WAAW;IAAuB,mBAAc,GAAdC,cAAc;IAFpE,kBAAa,GAAgB,IAAI,CAAC,CAAC;IAGjC,IAAI,CAACC,WAAW,GAAG,IAAI,CAACF,WAAW,CAACG,KAAK,CAAC;MACxCC,IAAI,EAAE,CAAC,EAAE,EAAEP,UAAU,CAACQ,QAAQ,CAAC;MAC/BC,WAAW,EAAE,CAAC,EAAE,EAAET,UAAU,CAACQ,QAAQ,CAAC;MACtCE,KAAK,EAAE,CAAC,CAAC,EAAE,CAACV,UAAU,CAACQ,QAAQ,EAAER,UAAU,CAACW,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;MACpDC,SAAS,EAAE,CAAC,EAAE,EAAEZ,UAAU,CAACQ,QAAQ,CAAC;MACpCK,MAAM,EAAE,CAAC,KAAK;KACf,CAAC;EACJ;EAEAC,QAAQ;IACN,IAAI,IAAI,CAACT,WAAW,CAACU,KAAK,EAAE;MAC1B,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,EAAE;MAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAE,IAAI,CAACb,WAAW,CAACc,GAAG,CAAC,MAAM,CAAC,EAAEC,KAAK,CAAC;MAC5DJ,QAAQ,CAACE,MAAM,CAAC,aAAa,EAAE,IAAI,CAACb,WAAW,CAACc,GAAG,CAAC,aAAa,CAAC,EAAEC,KAAK,CAAC;MAC1EJ,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAE,IAAI,CAACb,WAAW,CAACc,GAAG,CAAC,OAAO,CAAC,EAAEC,KAAK,CAAC;MAC9DJ,QAAQ,CAACE,MAAM,CAAC,WAAW,EAAE,IAAI,CAACb,WAAW,CAACc,GAAG,CAAC,WAAW,CAAC,EAAEC,KAAK,CAAC;MACtEJ,QAAQ,CAACE,MAAM,CAAC,QAAQ,EAAE,IAAI,CAACb,WAAW,CAACc,GAAG,CAAC,QAAQ,CAAC,EAAEC,KAAK,CAAC;MAEhE,IAAI,IAAI,CAACC,aAAa,EAAE;QACtBL,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAE,IAAI,CAACG,aAAa,CAAC;;MAG9C,IAAI,CAACjB,cAAc,CAACkB,aAAa,CAACN,QAAQ,CAAC,CAACO,SAAS,CACnDC,QAAQ,IAAG;QACTC,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEF,QAAQ,CAAC;MACvD,CAAC,EACDG,KAAK,IAAG;QACNF,OAAO,CAACE,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAChD,CAAC,CACF;KACF,MAAM;MACLF,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;;EAEnC;EAEAE,eAAe,CAACC,KAAU;IACxB,IAAIA,KAAK,CAACC,MAAM,CAACC,KAAK,IAAIF,KAAK,CAACC,MAAM,CAACC,KAAK,CAACC,MAAM,GAAG,CAAC,EAAE;MACvD,IAAI,CAACX,aAAa,GAAGQ,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;;EAE9C;CACD;AA7CY9B,qBAAqB,eALjCF,SAAS,CAAC;EACTkC,QAAQ,EAAE,mBAAmB;EAC7BC,WAAW,EAAE,gCAAgC;EAC7CC,SAAS,EAAE,CAAC,+BAA+B;CAC5C,CAAC,GACWlC,qBAAqB,CA6CjC;SA7CYA,qBAAqB","names":["Component","Validators","FormProductsComponent","constructor","formBuilder","productService","productForm","group","name","required","description","price","min","categoria","onSale","onSubmit","valid","formData","FormData","append","get","value","selectedImage","submitProduct","subscribe","response","console","log","error","onImageSelected","event","target","files","length","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["E:\\Angular2\\CRUD-MySQL-Express-Angular\\crud_angular\\src\\app\\components\\Contenidos\\form-products\\form-products.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ProductService } from '../../../shared/products.service'; // Adjust the path as needed\r\n\r\n@Component({\r\n  selector: 'app-form-products',\r\n  templateUrl: './form-products.component.html',\r\n  styleUrls: ['./form-products.component.css']\r\n})\r\nexport class FormProductsComponent {\r\n  productForm: FormGroup;\r\n  selectedImage: File | null = null; // For storing the selected image file\r\n\r\n  constructor(private formBuilder: FormBuilder, private productService: ProductService) {\r\n    this.productForm = this.formBuilder.group({\r\n      name: ['', Validators.required],\r\n      description: ['', Validators.required],\r\n      price: [0, [Validators.required, Validators.min(0)]],\r\n      categoria: ['', Validators.required],\r\n      onSale: [false]\r\n    });\r\n  }\r\n\r\n  onSubmit() {\r\n    if (this.productForm.valid) {\r\n      const formData = new FormData();\r\n      formData.append('name', this.productForm.get('name')?.value);\r\n      formData.append('description', this.productForm.get('description')?.value);\r\n      formData.append('price', this.productForm.get('price')?.value);\r\n      formData.append('categoria', this.productForm.get('categoria')?.value);\r\n      formData.append('onSale', this.productForm.get('onSale')?.value);\r\n\r\n      if (this.selectedImage) {\r\n        formData.append('image', this.selectedImage);\r\n      }\r\n\r\n      this.productService.submitProduct(formData).subscribe(\r\n        response => {\r\n          console.log('Form submitted successfully!', response);\r\n        },\r\n        error => {\r\n          console.error('Error submitting form!', error);\r\n        }\r\n      );\r\n    } else {\r\n      console.log('Form is invalid!');\r\n    }\r\n  }\r\n\r\n  onImageSelected(event: any) {\r\n    if (event.target.files && event.target.files.length > 0) {\r\n      this.selectedImage = event.target.files[0];\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}