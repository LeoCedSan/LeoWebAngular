{"ast":null,"code":"import { Validators } from '@angular/forms';\nexport class FormProductsComponent {\n  constructor(formBuilder, productService) {\n    this.formBuilder = formBuilder;\n    this.productService = productService;\n    this.selectedFile = null; // Variable para almacenar el archivo seleccionado\n    this.productForm = this.formBuilder.group({\n      name: ['', Validators.required],\n      description: ['', Validators.required],\n      price: [0, [Validators.required, Validators.min(0)]],\n      categoria: ['', Validators.required],\n      onSale: [false],\n      image: [null, Validators.required]\n    });\n  }\n  onImageSelected(event) {\n    this.selectedFile = event.target.files[0]; // Captura el archivo seleccionado\n  }\n\n  onSubmit() {\n    if (this.productForm.valid && this.selectedFile) {\n      const formData = new FormData();\n      formData.append('name', this.productForm.get('name').value);\n      formData.append('description', this.productForm.get('description').value);\n      formData.append('price', this.productForm.get('price').value);\n      formData.append('categoria', this.productForm.get('categoria').value);\n      formData.append('onSale', this.productForm.get('onSale').value);\n      formData.append('image', this.selectedFile); // Agrega el archivo al FormData\n      this.productService.addProduct(formData).subscribe(response => {\n        console.log('Product added successfully', response);\n        this.productForm.reset(); // Resetea el formulario\n      }, error => {\n        console.error('Error adding product', error);\n      });\n    } else {\n      console.error('Invalid form');\n    }\n  }\n}","map":{"version":3,"mappings":"AACA,SAAiCA,UAAU,QAAQ,gBAAgB;AAOnE,OAAM,MAAOC,qBAAqB;EAI9BC,YAAoBC,WAAwB,EAAUC,cAA8B;IAAhE,gBAAW,GAAXD,WAAW;IAAuB,mBAAc,GAAdC,cAAc;IAFpE,iBAAY,GAAgB,IAAI,CAAC,CAAC;IAG9B,IAAI,CAACC,WAAW,GAAG,IAAI,CAACF,WAAW,CAACG,KAAK,CAAC;MACtCC,IAAI,EAAE,CAAC,EAAE,EAAEP,UAAU,CAACQ,QAAQ,CAAC;MAC/BC,WAAW,EAAE,CAAC,EAAE,EAAET,UAAU,CAACQ,QAAQ,CAAC;MACtCE,KAAK,EAAE,CAAC,CAAC,EAAE,CAACV,UAAU,CAACQ,QAAQ,EAAER,UAAU,CAACW,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;MACpDC,SAAS,EAAE,CAAC,EAAE,EAAEZ,UAAU,CAACQ,QAAQ,CAAC;MACpCK,MAAM,EAAE,CAAC,KAAK,CAAC;MACfC,KAAK,EAAE,CAAC,IAAI,EAAEd,UAAU,CAACQ,QAAQ;KACpC,CAAC;EACN;EAEAO,eAAe,CAACC,KAAU;IACtB,IAAI,CAACC,YAAY,GAAGD,KAAK,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;EAC/C;;EAEAC,QAAQ;IACJ,IAAI,IAAI,CAACf,WAAW,CAACgB,KAAK,IAAI,IAAI,CAACJ,YAAY,EAAE;MAC7C,MAAMK,QAAQ,GAAG,IAAIC,QAAQ,EAAE;MAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAE,IAAI,CAACnB,WAAW,CAACoB,GAAG,CAAC,MAAM,CAAE,CAACC,KAAK,CAAC;MAC5DJ,QAAQ,CAACE,MAAM,CAAC,aAAa,EAAE,IAAI,CAACnB,WAAW,CAACoB,GAAG,CAAC,aAAa,CAAE,CAACC,KAAK,CAAC;MAC1EJ,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAE,IAAI,CAACnB,WAAW,CAACoB,GAAG,CAAC,OAAO,CAAE,CAACC,KAAK,CAAC;MAC9DJ,QAAQ,CAACE,MAAM,CAAC,WAAW,EAAE,IAAI,CAACnB,WAAW,CAACoB,GAAG,CAAC,WAAW,CAAE,CAACC,KAAK,CAAC;MACtEJ,QAAQ,CAACE,MAAM,CAAC,QAAQ,EAAE,IAAI,CAACnB,WAAW,CAACoB,GAAG,CAAC,QAAQ,CAAE,CAACC,KAAK,CAAC;MAChEJ,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAE,IAAI,CAACP,YAAY,CAAC,CAAC,CAAC;MAE7C,IAAI,CAACb,cAAc,CAACuB,UAAU,CAACL,QAAQ,CAAC,CAACM,SAAS,CAC9CC,QAAQ,IAAG;QACPC,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEF,QAAQ,CAAC;QACnD,IAAI,CAACxB,WAAW,CAAC2B,KAAK,EAAE,CAAC,CAAC;MAC9B,CAAC,EACDC,KAAK,IAAG;QACJH,OAAO,CAACG,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAChD,CAAC,CACJ;KACJ,MAAM;MACHH,OAAO,CAACG,KAAK,CAAC,cAAc,CAAC;;EAErC","names":["Validators","FormProductsComponent","constructor","formBuilder","productService","productForm","group","name","required","description","price","min","categoria","onSale","image","onImageSelected","event","selectedFile","target","files","onSubmit","valid","formData","FormData","append","get","value","addProduct","subscribe","response","console","log","reset","error"],"sourceRoot":"","sources":["E:\\Angular2\\CRUD-MySQL-Express-Angular\\crud_angular\\src\\app\\components\\Contenidos\\form-products\\form-products.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ProductService } from '../../../shared/products.service';\r\nimport { ProductModel } from omponent({\r\n    selector: 'app-form-products',\r\n    templateUrl: './form-products.component.html',\r\n    styleUrls: ['./form-products.component.css']\r\n})\r\nexport class FormProductsComponent {\r\n    productForm: FormGroup;\r\n    selectedFile: File | null = null; // Variable para almacenar el archivo seleccionado\r\n\r\n    constructor(private formBuilder: FormBuilder, private productService: ProductService) { // Asegúrate de inyectar el servicio aquí\r\n        this.productForm = this.formBuilder.group({\r\n            name: ['', Validators.required],\r\n            description: ['', Validators.required],\r\n            price: [0, [Validators.required, Validators.min(0)]],\r\n            categoria: ['', Validators.required],\r\n            onSale: [false],\r\n            image: [null, Validators.required],\r\n        });\r\n    }\r\n\r\n    onImageSelected(event: any) {\r\n        this.selectedFile = event.target.files[0]; // Captura el archivo seleccionado\r\n    }\r\n\r\n    onSubmit() {\r\n        if (this.productForm.valid && this.selectedFile) {\r\n            const formData = new FormData();\r\n            formData.append('name', this.productForm.get('name')!.value);\r\n            formData.append('description', this.productForm.get('description')!.value);\r\n            formData.append('price', this.productForm.get('price')!.value);\r\n            formData.append('categoria', this.productForm.get('categoria')!.value);\r\n            formData.append('onSale', this.productForm.get('onSale')!.value);\r\n            formData.append('image', this.selectedFile); // Agrega el archivo al FormData\r\n\r\n            this.productService.addProduct(formData).subscribe(\r\n                response => {\r\n                    console.log('Product added successfully', response);\r\n                    this.productForm.reset(); // Resetea el formulario\r\n                },\r\n                error => {\r\n                    console.error('Error adding product', error);\r\n                }\r\n            );\r\n        } else {\r\n            console.error('Invalid form');\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}